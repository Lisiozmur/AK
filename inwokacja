_code segment
assume  cs:_code, ds:_data, ss:_stack  

;Funkcja start jest punktem wejscia programu. Jest to pierwsza funkcja wykonywana po uruchomieniu programu.
;Funkcja start konfiguruje segmenty pamieci dla kodu, danych i stosu, a nastepnie laduje parametry wiersza polecen za pomoca funkcji cmlparam. 
;Nastepnie otwiera plik okreslony przez parametry za pomoca przerwania int 21h i przechowuje uchwyt pliku w zmiennej filehandle.
;Nastepnie funkcja start wywoluje po kolei funkcje findcontrolsection, setupmenu, calcbpm i playsong. Na koniec czysci ekran funkcja cls i wychodzi z programu wywolaniem przerwania int 21h
start:
    mov ax,_data
    mov ds,ax
    mov ax,_stack
    mov ss,ax 
    
    ; load params from command line 
    call cmlparam
    ; open file from parameters
    lea dx, filename   
    mov ax, 3D00h      ;open file
    int 21h
    mov filehandle, ax
    call findcontrolsection
    call setupmenu     
    call calcbpm                                  
    call playsong

;Funkcja "exit" jest wywolywana na koncu programu, po zakonczeniu funkcji playsong. 
;Czysci ekran funkcja cls, a nastepnie wychodzi z programu wywolaniem przerwania int 21h.
;Rejestr ah jest ustawiony na 4ch, a rejestr al na 0, co jest kodem funkcji wyjscia wywolania przerwania int 21h. 
;Powoduje to zakonczenie dzialania programu i przywrócenie kontroli do systemu operacyjnego.    
exit:
    call cls                                
    mov ah, 4ch
    mov al, 0
    int 21h 

;"setupmenu", aby wyswietlic menu na ekranie. 
;Najpierw czysci ekran za pomoca funkcji cls, a nastepnie konwertuje wartosc w tablicy uderzen o indeksie 0 z dziesietnej na szesnastkowa za pomoca funkcji todec. 
;Nastepnie pobiera wartosc z tablicy oktawowej pod indeksem 0, przesuwa ja w prawo o 1, dodaje do niej „1” i zapisuje wynik w tablicy defaultoctave pod indeksem 0.
;Nastepnie funkcja setupmenu laduje adres zmiennej menustring do rejestru dx i wywoluje przerwanie int 21h z ah ustawionym na 9, aby wyswietlic lancuch pod tym adresem. 
;Na koniec powraca z instrukcja ret.
setupmenu proc near
    call cls
    mov ax, beat[0]
    call todec
    mov al, octave[0]
    shr al, 1
    add al, '1'
    mov defaultoctave[0], al
    lea dx, menustring
    mov ah, 9
    int 21h
    ret
setupmenu endp 

;Pojawia sie funkcja checkkey, która sprawdza wprowadzanie z klawiatury i wykonuje okreslone czynnosci na podstawie nacisnietego klawisza. 
;Najpierw wywoluje przerwanie int 16h z ah ustawionym na 1, aby sprawdzic, czy klawisz zostal nacisniety. 
;Jesli zaden klawisz nie zostal wcisniety, nastepuje powrót z instrukcja ret. 
;Jesli klawisz zostal nacisniety, ponownie wywoluje przerwanie int 16h z ah ustawionym na 0, aby uzyskac kod nacisnietego klawisza i zapisuje go w rejestrze al.
;Nastepnie funkcja porównuje wartosc w rejestrze al z róznymi kluczami („p”, „P”, „x”, „X”, „+” i „-”). 
;Jesli klawisz to „p” lub „P”, przeskakuje do etykiety pauzy i zatrzymuje utwór. 
;Jesli kluczem jest „x” lub „X”, przeskakuje do etykiety wyjscia i wychodzi z programu. J
;esli klucz to „+”, przeskakuje do etykiety przyspieszenia i przyspiesza tempo. Jesli kluczem jest „-”, przeskakuje do etykiety retard i zwalnia tempo. 
;Jesli zaden z tych warunków nie jest spelniony, powraca z instrukcja ret.
;Etykiety przyspieszenia i opóznienia modyfikuja wartosc w tablicy uderzen w indeksie 0, a nastepnie przeskakuja do etykiety zmiany tempa. 
;Etykieta tempochange wywoluje funkcje calcbpm i setupmenu, a nastepnie powraca z instrukcja ret. 
;Etykieta pauzy czeka na kolejne nacisniecie klawisza, a nastepnie powraca z instrukcja ret.
checkkey proc near
    mov ah, 1
    int 16h
    jz endcheckkey
    mov ah, 0
    int 16h
    
    cmp al, 'p'
    je pause
    cmp al, 'P'
    je pause
    cmp al, 'x'
    je exit
    cmp al, 'X'
    je exit   
    cmp al, '+'
    je hasten
    cmp al, '-'
    je retard  
    ret
;Wydaje sie, ze funkcja zwalniania zwalnia tempo utworu, odejmujac 5 od wartosci w tablicy uderzen o indeksie 0. 
;Nastepnie przeskakuje do etykiety zmiany tempa.
;Etykieta tempochange wywoluje funkcje calcbpm i setupmenu, a nastepnie powraca z instrukcja ret. 
;Wyglada na to, ze funkcja calcbpm oblicza tempo (w uderzeniach na minute) na podstawie wartosci w tablicy uderzen, a funkcja setupmenu aktualizuje menu na ekranie, odzwierciedlajac zmiane tempa.
retard:
    sub beat[0], 5 
    jmp tempochange
;Wydaje sie, ze funkcja hasten przyspiesza tempo utworu, dodajac 5 do wartosci w tablicy uderzen o indeksie 0. 
;Nastepnie przeskakuje do etykiety zmiany tempa.
;Etykieta tempochange wywoluje funkcje calcbpm i setupmenu, a nastepnie powraca z instrukcja ret. 
;Wyglada na to, ze funkcja calcbpm oblicza tempo (w uderzeniach na minute) na podstawie wartosci w tablicy uderzen, a funkcja setupmenu aktualizuje menu na ekranie, odzwierciedlajac zmiane tempa.
hasten:
    add beat[0], 5
;Pojawi sie funkcja zmiany tempa, która aktualizuje tempo (w uderzeniach na minute) utworu i aktualizuje menu na ekranie, aby odzwierciedlic zmiane. 
;Najpierw wywoluje funkcje calcbpm, aby obliczyc nowe tempo na podstawie wartosci w tablicy uderzen. 
;Nastepnie wywoluje funkcje setupmenu, aby zaktualizowac menu na ekranie, aby pokazac nowe tempo. Na koniec powraca z instrukcja ret.
tempochange:  
    call calcbpm 
    call setupmenu 
    ret
;Pojawia sie funkcja pauzy, aby wstrzymac utwór, czekajac na kolejne nacisniecie klawisza. 
;Robi to poprzez wywolanie przerwania int 16h z wartoscia ah ustawiona na 0. 
;Przerwanie to czeka na nacisniecie klawisza i zapisuje kod klucza w rejestrze al, gdy zostanie odebrany. Nastepnie funkcja pauzy powraca z instrukcja ret.
pause:
    mov ah, 0
    int 16h 
;Czesc  checkey zakancza funkcje	
endcheckkey:
    ret
checkkey endp
;Pojawia sie funkcja cls, aby wyczyscic ekran. 
;Robi to poprzez dwukrotne wywolanie przerwania int 10h, z rejestrem ax ustawionym za kazdym razem na inna wartosc.
;Pierwsze wywolanie int 10h ustawia rejestr ax na 0003h, co jest kodem dla funkcji ustawiania trybu wideo. 
;Ta funkcja ustawia tryb wideo karty graficznej na tryb okreslony w rejestrze al.
;Drugie wywolanie int 10h ustawia rejestr ax na 1003h, co jest kodem dla ustawionej funkcji rozmiaru i ksztaltu kursora. 
;Ta funkcja ustawia rozmiar i ksztalt kursora w trybie tekstowym. Rejestr bx jest ustawiony na 0, co okresla poczatkowa linie skanowania ksztaltu kursora i koncowa linie skanowania ksztaltu kursora. 
;Kursor nie jest wyswietlany, jesli linia poczatku skanowania jest równa koncowej linii skanowania.
;Wszystkie te wywolania int 10h powoduja wyczyszczenie ekranu i ukrycie kursora.    

cls proc near
    mov ax, 0003h
    int 10h
    mov ax, 1003h
    xor bx, bx
    int 10h
    ret
cls endp

;Wydaje sie, ze funkcja tohex konwertuje liczbe z dziesietnej na szesnastkowa. 
;Robi to, dzielac liczbe wielokrotnie przez 10 i za kazdym razem przechowujac reszte jako cyfre szesnastkowa. 
;Cyfry szesnastkowe sa nastepnie laczone w celu utworzenia szesnastkowej reprezentacji liczby.
;Funkcja przyjmuje liczbe do konwersji jako dane wejsciowe w rejestrze ax i zapisuje wynik w tym samym rejestrze. 
;Wykorzystuje rejestry bx, cx i dx jako pamiec tymczasowa.
;Funkcja tohex najpierw umieszcza rejestry bx, cx i dx na stosie, aby zapisac ich wartosci, a nastepnie ustawia rejestr bx na wartosc z rejestru ax. 
;Ustawia równiez rejestry ax i cx odpowiednio na 0 i 4.
;Nastepnie funkcja wchodzi w petle, która dzieli wartosc w rejestrze bx przez 10 za pomoca instrukcji div i zapisuje reszte w rejestrze dx. 
;Nastepnie przesuwa wartosc w rejestrze bx w lewo o 4 bity za pomoca instrukcji rol i przechowuje 4 nizsze bity wartosci w rejestrze bx w rejestrze dx. 
;Instrukcja and sluzy do maskowania wszystkich bitów z wyjatkiem 4 nizszych. 
;Instrukcja add jest nastepnie uzywana do dodania wartosci w rejestrze dx do wartosci w rejestrze ax, który gromadzi szesnastkowa reprezentacje liczby. 
;Petla jest kontynuowana, dopóki wartosc w rejestrze cx nie osiagnie 0.
;Na koniec funkcja zdejmuje ze stosu wartosci rejestrów dx, cx i bx, aby przywrócic ich pierwotne wartosci i powraca z instrukcja ret.

tohex proc near
    ; converts ax from dec to hex ex: 0255h -> 00FFh
    push bx 
    mov bx, ax
    push cx
    push dx
    
    xor ax, ax
    mov cx, 4
hexmul:
    mov dx, 10d
    mul dx 
    rol bx, 4
    mov dx, bx
    and dx, 0Fh
    add ax, dx
    loop hexmul
    
    pop dx
    pop cx
    pop bx
    ret
tohex endp

;The todec function appears to convert a number from hexadecimal to decimal. 
;It does this by dividing the number repeatedly by 16 and storing the remainder as a decimal digit each time. 
;The decimal digits are then combined to form the decimal representation of the number.
;The function takes the number to be converted as an input in the ax register, and stores the result in the hexStore array as ASCII characters. 
;It uses the bx, cx, and dx registers as temporary storage.
;The function first pushes the bx, cx, and dx registers onto the stack to save their values, and then sets the bx register to 10 and the cx and dx registers to 0. 
;It also initializes the hexStore array with the value "$$" at indices 0 and 1.
;The function then enters a loop that divides the value in the ax register by 10 using the div instruction and stores the remainder in the dx register. 
;It then adds the ASCII code for the digit '0' to the value in the dx register using the add instruction, and pushes the result onto the stack. 
;The inc instruction is used to increment the value in the cx register, which counts the number of digits in the result. The loop continues until the value in the ax register becomes 0.
;After the loop completes, the function reverses the order of the digits on the stack by popping them off the stack and storing them in the hexStore array starting at index 2. 
;Finally, it pops the values of the dx, cx, and bx registers off the stack to restore their original values and returns with the ret instruction.
todec proc near        
    ; converts ax from hex to dec ascii ex: 00FFh -> 3[0]3[2]3[5]3[5]h
    ; stores inside hexStore var
    ; dec is HR only, so might as well store it as ascii right away 
    push bx
    push cx
    push dx                                            
           
    mov hexStore[0], word ptr '$$'
    mov hexStore[1], word ptr '$$'
    mov bx, 10
    xor cx, cx        
divide:             
    xor dx, dx         
    div bx          
    add dl, '0'    
    push dx        
    inc cx            
    cmp ax, 0         
    jne divide     
    
    lea di, hexStore 
reverse:           
    pop [di]         
    inc di           
    loop reverse
    
    pop dx
    pop cx
    pop bx    
    ret  
todec endp
;Wydaje sie, ze funkcja epilepsji w jakis sposób modyfikuje ekran. Pobiera jedno wejscie w rejestrze al i uzywa go do wypelnienia ekranu wzorem naprzemiennych znaków. 
;Uzywa rejestru es, aby uzyskac dostep do pamieci ekranu, która jest przechowywana w zmiennej ekranu.
;Funkcja najpierw umieszcza rejestr dx na stosie, aby zapisac jego wartosc, a nastepnie zapisuje wartosc w rejestrze al w rejestrze dl. 
;Nastepnie umieszcza rejestry ax, bx i cx na stosie, aby zapisac ich wartosci.
;Nastepnie funkcja ustawia rejestr bx na 0, a rejestr cx na 80d, czyli liczbe kolumn na ekranie. 
;Nastepnie przesuwa wartosc w rejestrze dl w prawo o 1 iw lewo o 4, co wydaje sie byc próba ustawienia rejestru dl na wartosc stanowiaca polowe zakresu mozliwych wartosci. 
;Nastepnie funkcja ustawia rejestr di na 1, który jest adresem pierwszego znaku na ekranie.
;Nastepnie funkcja wchodzi w petle, która przechowuje wartosc w rejestrze dl pod adresem wskazywanym przez rejestry es i di, i zwieksza rejestr di o 2. 
;Petla jest kontynuowana, dopóki wartosc w rejestrze cx nie osiagnie 0.
;Na koniec funkcja usuwa wartosci rejestrów cx, bx, ax i dx

epilepsy proc near   
    push dx      
    mov dl, al
    push ax
    push bx
    push cx
    
    xor bx, bx          
    mov ax, screen
    mov es, ax

    mov cx, 80d
    shr dx, 1
    shl dx, 4
    mov di, 1
fillloop:
    mov byte ptr es:[di], dl
    add di, 2
    loop fillloop
    
    pop cx
    pop bx
    pop ax  
    pop dx
    ret    
epilepsy endp 

;Wyglada na to, ze calcbpm to funkcja, która oblicza tempo (w uderzeniach na minute) na podstawie wartosci w tablicy uderzen. 
;Wydaje sie, ze robi to, dzielac wartosc w tablicy uderzen przez 60000 i przechowujac wynik w zmiennej bpm.
;Funkcja najpierw umieszcza rejestry dx i ax na stosie, aby zapisac ich wartosci. 
;Nastepnie laduje wartosc z tablicy bitów pod indeksem 0 do rejestru ax i dzieli ja przez 60000 za pomoca instrukcji div, ze zmienna bpm jako dzielnikiem. 
;Iloraz jest przechowywany w zmiennej bpm, a reszta jest przechowywana w rejestrze dx.
;Na koniec funkcja usuwa wartosci rejestrów ax i dx ze stosu, aby przywrócic ich oryginalne wartosci i powraca z instrukcja ret.

calcbpm proc near
    ; calculate the beats per minute, 
    ; so 60000000µs / beat, 0x3938700µs / beat  
    ; min BPM is 6 cuz otherwise overflow 
    push ax
    push bx
    push dx
    
    mov ax, 4000h  ; cut 2 0's, they are useless for us
    mov dx, 0004h
    mov bx, beat[0]
    shr bx, 2
    div bx
    mov notedur[0], ax
    
    pop dx
    pop bx
    pop ax
    ret
calcbpm endp
;Nie jest jasne, co robi funkcja playsong, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Jest mozliwe, ze funkcja playsong odtwarza utwór przy uzyciu parametrów okreslonych w kodzie, takich jak uchwyt pliku i tempo. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji Playsong nie wynika jasno z dostarczonych informacji.
playsong proc near
    cmp char[0], 0
    je endplaysong
    call checkkey
    call parsegroup
    call epilepsy     
    call playgroup
    jmp playsong
endplaysong:
    ret
playsong endp
;Nie jest jasne, co robi funkcja grupy zabaw, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Mozliwe jest, ze funkcja playgroup odtwarza grupe nut lub sekcje utworu przy uzyciu parametrów okreslonych w kodzie, takich jak uchwyt pliku i tempo. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji grupy zabawowej nie wynika jasno z dostarczonych informacji.
playgroup proc near
    cmp al, 30d
    je waitbios
    
    mov di, ref[bx]
    xor bx, bx
    mov bl, al
                       
    cli                     ; Don't disturb the setting sequence
    mov al, 0b6h
    out 43h, al
    mov ax, di[bx]
    
    out 42h, al
    mov al, ah
    out 42h, al
    sti
    
    in al, 61h              ; Speaker on
    or al, 03h
    out 61h, al
;Wyglada na to, ze funkcja waitbios czeka przez okreslona liczbe milisekund, wywolujac przerwanie int 15h z rejestrem ah ustawionym na 86h, co jest kodem funkcji oczekiwania. Liczba milisekund oczekiwania jest przekazywana do funkcji w rejestrach cx i dx, które sa laczone w jedna wartosc 16-bitowa.
;Funkcja waitbios najpierw umieszcza rejestr ax na stosie, aby zapisac jego wartosc, a nastepnie laduje wartosc z rejestru cx do rejestru ah, a wartosc z rejestru dx do rejestru al. Nastepnie wywoluje przerwanie int 15h z rejestrem ah ustawionym na 86h, aby zainicjowac funkcje oczekiwania.
;Po zakonczeniu oczekiwania funkcja zdejmuje wartosc rejestru ax ze stosu, aby przywrócic jego pierwotna wartosc i powraca z instrukcja ret.
;Zadaniem funkcji waitbios jest wstrzymanie wykonywania programu na okreslony czas, co moze byc przydatne do kontrolowania synchronizacji niektórych operacji lub zapewniania opóznien miedzy zdarzeniami.    
waitbios:
    call bioswait
    
    in al, 61h          ; 5) Read the current keyboard controller status.
    and al, 0fch        ; 5) Zero 0 and 1 bit, simply disabling the gate.
    out 61h, al
    
    ret  
        
playgroup endp

;Wyglada na to, ze bioswait jest funkcja, która czeka przez okreslona liczbe milisekund, wywolujac przerwanie int 15h z rejestrem ah ustawionym na 86h, co jest kodem funkcji oczekiwania. 
;Liczba milisekund oczekiwania jest przekazywana do funkcji w rejestrach cx i dx, które sa laczone w jedna wartosc 16-bitowa.
;Funkcja bioswait wydaje sie byc podobna do funkcji waitbios, z ta róznica, ze kolejnosc, w jakiej wartosci z rejestrów cx i dx sa ladowane do rejestrów ah i al. 
;Podczas gdy funkcja waitbios laduje wartosc z rejestru cx do rejestru ah, a wartosc z rejestru dx do rejestru al, funkcja bioswait wydaje sie ladowac wartosc z rejestru dx do rejestru ah, a wartosc z rejestru cx do rejestru al.
;Poza ta róznica, funkcja bioswait wydaje sie zachowywac w taki sam sposób jak funkcja waitbios, wywolujac przerwanie int 15h z rejestrem ah ustawionym na 86h w celu zainicjowania funkcji oczekiwania, a nastepnie wracajac z instrukcja ret.

bioswait proc near
    push ax
    
    mov ax, cx
    call tohex
    mov cx, ax
    
    mov ax, word ptr notedur[0]
    xor dx, dx
    div cx
    mov cl, ah
    mov dh, al
    mov dl, 0h
    mov ah, 86h
    int 15h
    
    pop ax 
    ret    
bioswait endp 
;Nie jest jasne, co robi funkcja parsegroup, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Jest mozliwe, ze funkcja parsegroup analizuje grupe nut lub sekcje utworu przy uzyciu parametrów okreslonych w kodzie. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji grupy analizujacej nie wynika jasno z dostarczonych informacji.
parsegroup proc near
    ; cx duration
    ; bx octave pos
    ; ax note pos
    
    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx
    mov bl, octave[0]
    mov cl, duration[0]
;Mozliwe, ze funkcja parsegroupduration przetwarza czas trwania grupy nut lub fragmentu utworu przy uzyciu parametrów okreslonych w kodzie.
parsegroupduration:       
    cmp char[0], ' '
    je parsegroupdurationnext
    cmp char[0], ','
    je parsegroupdurationnext
    cmp char[0], '1'
    jb parsegroupnote
    cmp char[0], '8'
    ja parsegroupnote
    cmp dl, 1
    je skipfix
    mov dl, 1
    xor cl, cl
Mozliwe, ze funkcja parsegroupduration przetwarza czas trwania grupy nut lub fragmentu utworu przy uzyciu parametrów okreslonych w kodzie.
skipfix:
    shl cl, 4 
    add cl, char[0]
    sub cl, '0'
parsegroupdurationnext: 
    call readnext    
    jmp parsegroupduration
It is possible that the parsegroupnote function processes a group of notes or a section of a song using the parameters specified in the code.
parsegroupnote:
    cmp char[0], ' '
    je parsegroupnotenext
    cmp char[0], '#'
    je parsenote
    cmp char[0], 'A'
    jb parsegroupoctave
    cmp char[0], 'P'
    jbe parsenote
    cmp char[0], 'a'
    jb parsegroupoctave
    cmp char[0], 'p'
    jbe parsenotesmall
parsegroupnotenext: 
    call readnext
    jmp parsegroupnote
    
parsegroupoctave: 
    cmp char[0], '.'
    je dottednote
    cmp char[0], ' '
    je parsegroupoctave
    cmp char[0], '1'
    jb parsegroupend
    cmp char[0], '8'
    ja parsegroupend
    mov bl, char[0]
    sub bx, '1'
    shl bx, 1
parsegroupend:
    call readnext
    ret
  function processes a dotted note, which is a musical notation that indicates that the duration of a note should be increased by half of its original value. In other words, a dotted quarter note would be played for the duration of a quarter note plus an eighth note, or three eighth notes. 
dottednote:
    mov dl, cl
    shr dl, 2
    sub cl, dl
    call readnext
    jmp parsegroupoctave
 
; this can be optimised to use indexes instead of HR ordering, TODO
parsenotesmall:
    sub char[0], 32d  ; to upper case
parsenote:
    cmp char[0], '#'
    je notesharp 
    mov al, char[0] 
    sub ax, 'A' ; to value 
    shl ax, 1
    jmp parsegroupnotenext   
notesharp:
    add ax, 14d
    jmp parsegroupnotenext
     
parsegroup endp

;Nie jest jasne, co robi funkcja findcontrolsection, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Mozliwe, ze funkcja findcontrolsection wyszuka sekcje kontrolna w pliku lub strumieniu danych przy uzyciu parametrów okreslonych w kodzie, takich jak uchwyt pliku. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji findcontrolsection nie wynika jasno z podanych informacji.  

findcontrolsection proc near
    ; find 2 occurences of :, then navigate to the first one, load params, then to the second one
    ; leave file cursor on the last occurence of :
    mov readmode[0], 1
    xor ax, ax     
    xor dx, dx

findcolon:
    call readnext
    cmp char[0], 0
    je setposition
    inc ax
    cmp char[0], ':'
    jne findcolon
    
    cmp dx, 0
    je findcolonagain
    call setposition
    call soundparam
    mov dx, ax
setposition:
    push ax
    mov bx, filehandle
    xor cx, cx
    mov ax, 4200h
    int 21h
    pop ax        
    call readnext
    ret  
    
findcolonagain:
    mov dx, ax
    jmp findcolon  
    
findcontrolsection endp
;Nie jest jasne, co robi funkcja cmlparam, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Mozliwe, ze funkcja cmlparam przetwarza parametry wiersza polecen przekazywane do programu podczas jego uruchamiania. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji cmlparam nie wynika jasno z dostarczonych informacji.    
cmlparam proc near
    ; cml param format [hardcoded: es:80h]: 1B:{len}, ?B:{input}, 1B:{\ret}
    ; out params ?B:{filename} ?B?:d={dur} ?B?:o={octave} ?B?:b={beat}      
    lea di, filename
    xor bx, bx            
nameparam:
    call readnext
    mov al, char[0]
    cmp al, 13d
    je endcmlparam
    cmp al, ' '
    jne writetoname
    call soundparam
endcmlparam: 
    ret
writetoname:   
    mov [bx+di-1], al 
    jmp nameparam            
cmlparam endp
;Nie jest jasne, co robi funkcja soundparam, poniewaz nie podano kodu tej funkcji. Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Mozliwe, ze funkcja soundparam przetwarza parametry zwiazane z wyjsciem dzwieku, takie jak glosnosc lub ton. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji soundparam nie wynika jasno z dostarczonych informacji.
soundparam proc near
    push ax
soundparamloop:
    xor ax, ax
    call checkend
    jc endsoundparam
    cmp char[0], ' '
    je soundparamnext
    cmp char[0], 'd'
    je durparam
    cmp char[0], 'D'
    je durparam
    cmp char[0], 'o'
    je octparam
    cmp char[0], 'O'
    je octparam
    cmp char[0], 'b'
    je beatparam
    cmp char[0], 'B'
    je beatparam
soundparamnext: 
    call readnext   
    jmp soundparamloop
endsoundparam:
    pop ax
    ret
durparam:
    call readparam
    mov duration[0], al
    call checkend
    jnc soundparamloop
    jmp endsoundparam 
    
octparam:
    call readparam
    dec al
    shl al, 1   
    mov octave[0], al
    call checkend
    jnc soundparamloop
    jmp endsoundparam  
      
beatparam:   
    call readparam
    call tohex 				
    mov beat[0], ax  
    call checkend
    jnc soundparamloop
    jmp endsoundparam
	      
; loads full param value into AX  
readparam:
    call readnext
    cmp char[0], '='
    je readparam
    cmp char[0], ' '
    je readparam   
    cmp char[0], ','
    je endreadparam   
    call checkend
    jc endreadparam
    rol ax, 4
    add al, char[0]
    sub al, '0'
    jmp readparam
endreadparam:
    ret
    
checkend:
   cmp char[0], 13d
   je foundend
   cmp char[0], ':'
   je foundend
   cmp char[0], 0
   je foundend
   clc
   ret
foundend:
   stc
   ret
soundparam endp
;Nie jest jasne, co robi funkcja readnext, poniewaz nie podano kodu tej funkcji. 
;Bez szerszego kontekstu trudno jest okreslic, co robi ta funkcja. 
;Jest mozliwe, ze funkcja readnext odczyta nastepna wartosc lub fragment danych z pliku lub strumienia danych przy uzyciu parametrów okreslonych w kodzie, takich jak uchwyt pliku. 
;Jest to jednak tylko przypuszczenie, poniewaz cel funkcji readnext nie wynika jasno z dostarczonych informacji.
readnext proc near
    ; reads next char im w/e mode and stores it in char[0]
    cmp readmode[0], 0
    je cmlread
    
    ; file read 
    push ax
    push bx
    push cx
    push dx
    
    mov bx, filehandle
    lea dx, char 
    mov ah, 3Fh           
    mov cx, 1     
    int 21h
    cmp ax, 0
    je eof

returnreadnext:    
    pop dx
    pop cx
    pop bx
    pop ax
    ret
eof:
    mov char[0], 0
    jmp returnreadnext    
cmlread:
    push ax
    mov al, es:[bx+82h]
    mov char[0], al
    inc bx
    pop ax
    ret     
        
readnext endp
_code ends

_data segment
    ;         A       B      C      D      E      F      G      A#       C#     D#        F#    G#
    oct1 dw 21694d,19327d,36485d,32505d,28958d,27333d,24351d,20477d,0d,34437d,30680d,0d,25799d,22984d
    oct2 dw 10847d, 9664d,18243d,16252d,14479d,13666d,12175d,10238d,0d,17219d,15340d,0d,12899d,11492d
    oct3 dw  5424d, 4832d, 9121d, 8126d, 7240d, 6833d, 6088d, 5119d,0d, 8609d, 7670d,0d, 6450d, 5746d
    oct4 dw  2712d, 2416d, 4561d, 4063d, 3620d, 3417d, 3044d, 2560d,0d, 4305d, 3835d,0d, 3225d, 2873d
    oct5 dw  1356d, 1208d, 2280d, 2032d, 1810d, 1708d, 1522d, 1280d,0d, 2152d, 1918d,0d, 1612d, 1437d
    oct6 dw   678d,  604d, 1140d, 1016d,  905d,  854d,  761d,  640d,0d, 1076d,  959d,0d,  806d,  718d
    oct7 dw   339d,  302d,  570d,  508d,  452d,  427d,  380d,  320d,0d,  538d,  479d,0d,  403d,  359d
    ref dw oct1, oct2, oct3, oct4, oct5, oct6, oct7
    readmode db 0             ; I/O read mode 0||1 [ 0 = CML, 1 = CurrFile ]
    char db 2 dup(0)          ; single char from I/O function
    duration db 4             ; hex default dur of a single note entry
    octave db 10              ; hex default oct of a single note entry
    beat dw 63d               ; hex default bpm of entire song
    notedur dw 0000h          ; 2 highest bytes of the duration of a single beat
    menustring db 80 dup('#'), 10d, 13d, "   [X] Exit   [P] Play/Pause   [+] Hasten   [-] Retard", 10d, 13d, 10d, 13d, "   Now Playing: "
    filename db 64 dup(0)
    menustring2 db 10d, 13d, "   Default Octave: "
    defaultoctave db '6'
    menustring3 db "   Current BPM: "
    hexStore dw "$$", "$$", "$$"
    screen equ 0B800h         ; magic number \o/
    filehandle dw ?
_data ends

_stack segment stack
    dw    100h dup(?)
_stack ends

end start   
